import os
from flask import Flask, render_template, request, redirect, url_for, send_file, flash, send_from_directory
from werkzeug.utils import secure_filename
import pandas as pd
import random
import zipfile
from datetime import datetime
import requests
from fpdf import FPDF
from dotenv import load_dotenv
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user, current_user
from werkzeug.security import generate_password_hash, check_password_hash
import sqlite3
import time
from io import StringIO
import click

load_dotenv()

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'uploads'
app.config['DOWNLOAD_FOLDER'] = 'downloads'
app.config['SECRET_KEY'] = os.getenv('FLASK_SECRET_KEY', 'dev-secret-key')
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024

# Initialize LoginManager
login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'user_login'

# User model
class User(UserMixin):
    def __init__(self, id, username, email):
        self.id = id
        self.username = username
        self.email = email

# Database setup
def get_db_connection():
    conn = sqlite3.connect('users.db')
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    with get_db_connection() as conn:
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS users
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      username TEXT UNIQUE NOT NULL,
                      email TEXT UNIQUE NOT NULL,
                      password TEXT NOT NULL)''')
        
        c.execute('''CREATE TABLE IF NOT EXISTS downloads
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                      user_id INTEGER NOT NULL,
                      filename TEXT NOT NULL,
                      filepath TEXT NOT NULL,
                      downloaded_at DATETIME NOT NULL,
                      FOREIGN KEY(user_id) REFERENCES users(id))''')
        conn.commit()

@login_manager.user_loader
def load_user(user_id):
    with get_db_connection() as conn:
        c = conn.cursor()
        c.execute("SELECT * FROM users WHERE id = ?", (user_id,))
        user = c.fetchone()
        if user:
            return User(id=user['id'], username=user['username'], email=user['email'])
        return None

# Ensure folders exist
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
os.makedirs(app.config['DOWNLOAD_FOLDER'], exist_ok=True)

uploaded_files = []

# Weather API Configuration
API_KEY = os.getenv('OPENWEATHER_API_KEY')
if not API_KEY:
    raise ValueError("OPENWEATHER_API_KEY environment variable is not set")

CITY = os.getenv('WEATHER_CITY', 'madurai')
BASE_URL = "http://api.openweathermap.org/data/2.5/forecast"

class TimetablePDF(FPDF):
    def __init__(self):
        super().__init__(format='A3', orientation='L')  # Use A3 landscape for more space
        self.set_auto_page_break(auto=True, margin=15)
        
    def header(self):
        self.set_fill_color(0, 100, 255)  # Blue background
        self.set_font('Arial', 'B', 20)  # Larger font size
        self.cell(0, 20, 'Weather-Based Timetable', 0, 1, 'C', fill=True)
        self.ln(15)

    def footer(self):
        self.set_y(-20)
        self.set_font('Arial', 'I', 10)
        self.cell(0, 15, f'Page {self.page_no()}', 0, 0, 'C')

def create_pdf_timetable(timetable, filename):
    try:
        pdf = TimetablePDF()
        pdf.add_page()
        
        # Add title
        pdf.set_font('Arial', 'B', 20)
        pdf.cell(0, 15, 'Weather-Based Timetable', 0, 1, 'C')
        pdf.ln(10)
        
        # Calculate column widths
        page_width = pdf.w - 40
        first_col_width = 40
        col_width = (page_width - first_col_width) / (len(timetable.columns))
        row_height = 15
        
        # Add headers
        pdf.set_font('Arial', 'B', 11)
        pdf.set_fill_color(51, 97, 238)
        pdf.set_text_color(255, 255, 255)
        pdf.cell(first_col_width, row_height, 'Day', 1, 0, 'C', True)
        
        for col in timetable.columns:
            pdf.cell(col_width, row_height, str(col), 1, 0, 'C', True)
        pdf.ln()
        
        # Add rows
        pdf.set_font('Arial', '', 10)
        for day in timetable.index:
            pdf.set_fill_color(245, 245, 245)
            pdf.cell(first_col_width, row_height, str(day), 1, 0, 'C', True)
            
            for col in timetable.columns:
                cell_value = str(timetable.loc[day, col])
                
                if cell_value == 'Lunch Break':
                    pdf.set_fill_color(255, 243, 224)
                    pdf.set_text_color(230, 81, 0)
                elif cell_value in labs:
                    pdf.set_fill_color(232, 240, 254)
                    pdf.set_text_color(51, 97, 238)
                    pdf.set_font('Arial', 'B', 10)
                else:
                    pdf.set_fill_color(255, 255, 255)
                    pdf.set_text_color(33, 33, 33)
                    pdf.set_font('Arial', '', 10)
                
                pdf.cell(col_width, row_height, cell_value, 1, 0, 'C', True)
            pdf.ln()
        
        # Save PDF
        pdf.output(filename)
        return filename
        
    except Exception as e:
        raise Exception(f"Failed to create PDF: {str(e)}")

def validate_csv(filepath):
    try:
        df = pd.read_csv(filepath)
        required_cols = {'Date', 'Day', 'Condition', 'Temperature', 'Humidity', 'Wind Speed'}
        if not required_cols.issubset(df.columns):
            missing = required_cols - set(df.columns)
            raise ValueError(f"Missing columns: {', '.join(missing)}")
        return True
    except Exception as e:
        raise ValueError(f"Invalid CSV: {str(e)}")

# Global variables for subjects and labs
subjects = ['PAD', 'ACD', 'CN', 'SE', 'exsel', 'FIE', 'free', 'Math', 'Physics', 'Chemistry', 'Biology', 'English']
labs = ['Computer Lab', 'Programming Lab', 'Science Lab', 'Language Lab']
no_lab_subjects = ['English', 'Math']  # Subjects that should never have labs

# Auth routes
@app.route('/register', methods=['GET', 'POST'])
def register():
    if current_user.is_authenticated:
        return redirect(url_for('index'))
    
    if request.method == 'POST':
        username = request.form['username']
        email = request.form['email']
        password = request.form['password']
        confirm_password = request.form['confirm_password']
        
        if 'terms' not in request.form:
            flash('You must accept the terms and conditions', 'error')
            return redirect(url_for('register'))
            
        if password != confirm_password:
            flash('Passwords do not match', 'error')
            return redirect(url_for('register'))
            
        # Server-side password validation
        if len(password) < 8:
            flash('Password must be at least 8 characters', 'error')
            return redirect(url_for('register'))
        if not any(c.isupper() for c in password):
            flash('Password must contain at least one uppercase letter', 'error')
            return redirect(url_for('register'))
        if not any(c.islower() for c in password):
            flash('Password must contain at least one lowercase letter', 'error')
            return redirect(url_for('register'))
        if not any(c.isdigit() for c in password):
            flash('Password must contain at least one number', 'error')
            return redirect(url_for('register'))
            
        hashed_password = generate_password_hash(password)
        
        try:
            with get_db_connection() as conn:
                c = conn.cursor()
                c.execute("INSERT INTO users (username, email, password) VALUES (?, ?, ?)",
                         (username, email, hashed_password))
                conn.commit()
            
            flash('Registration successful! Please log in.', 'success')
            return redirect(url_for('login'))
        except sqlite3.IntegrityError as e:
            if 'username' in str(e):
                flash('Username already exists', 'error')
            elif 'email' in str(e):
                flash('Email already exists', 'error')
            else:
                flash('Registration error - please try again', 'error')
            return redirect(url_for('register'))
        except Exception as e:
            flash(f'Registration failed: {str(e)}', 'error')
            return redirect(url_for('register'))
    
    return render_template('register.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('index'))
    
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        
        with get_db_connection() as conn:
            c = conn.cursor()
            c.execute("SELECT * FROM users WHERE username = ?", (username,))
            user = c.fetchone()
        
        if user and check_password_hash(user['password'], password):
            user_obj = User(id=user['id'], username=user['username'], email=user['email'])
            login_user(user_obj)
            next_page = request.args.get('next')
            return redirect(next_page) if next_page else redirect(url_for('index'))
        else:
            flash('Invalid username or password', 'error')
            return redirect(url_for('login'))
    
    return render_template('login.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    flash('You have been logged out', 'success')
    return redirect(url_for('index'))

@app.route('/configure_subjects', methods=['GET', 'POST'])
@login_required
def configure_subjects():
    global subjects, labs, no_lab_subjects
    if request.method == 'POST':
        # Process subjects with labs (split by newlines)
        subjects_text = request.form['subjects'].strip()
        subjects = [s.strip() for s in subjects_text.split('\n') if s.strip()]
        
        # Process lab names (split by newlines)
        labs_text = request.form['labs'].strip()
        labs = [s.strip() for s in labs_text.split('\n') if s.strip()]
        
        # Process subjects without labs (split by newlines)
        no_lab_text = request.form['no_lab_subjects'].strip()
        no_lab_subjects = [s.strip() for s in no_lab_text.split('\n') if s.strip()]
        
        flash('Subject configuration saved successfully!', 'success')
        return redirect(url_for('configure_subjects'))
    return render_template('subjects.html', 
                         subjects=subjects, 
                         labs=labs, 
                         no_lab_subjects=no_lab_subjects)

@app.route('/')
@app.route('/index')
def index():
    if not os.path.exists('exsel4/templates/index.html'):
        return "Welcome to Timetable Generator. Please configure the application."
    return render_template('index.html')

@app.route('/upload', methods=['GET', 'POST'])
@login_required
def upload():
    if request.method == 'POST':
        try:
            if 'file' not in request.files:
                flash('No file selected', 'error')
                return redirect(request.url)
            
            file = request.files['file']
            if file.filename == '':
                flash('No file selected', 'error')
                return redirect(request.url)
            
            if not file.filename.lower().endswith('.csv'):
                flash('Please upload a CSV file', 'error')
                return redirect(request.url)
            
            filename = secure_filename(file.filename)
            filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
            
            try:
                # Save the file
                file.save(filepath)
                
                # Validate the CSV
                validate_csv(filepath)
                
                # Add to uploaded files list
                uploaded_files.append({
                    'name': filename,
                    'path': filepath,
                    'uploaded_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                    'user_id': current_user.id
                })
                
                flash('File uploaded successfully!', 'success')
                return redirect(url_for('generate_timetable', filename=filename))
                
            except Exception as e:
                # Clean up the file if it exists
                if os.path.exists(filepath):
                    os.remove(filepath)
                flash(str(e), 'error')
                return redirect(request.url)
                
        except Exception as e:
            flash(f'Upload failed: {str(e)}', 'error')
            return redirect(request.url)
            
    return render_template('upload.html')

def get_weather_data():
    try:
        params = {
            "q": CITY,
            "appid": API_KEY,
            "units": "metric"
        }
        
        response = requests.get(BASE_URL, params=params, timeout=10)
        response.raise_for_status()
        data = response.json()
        
        if not data.get('list'):
            raise ValueError("No weather data available")
            
        return data
    except requests.exceptions.RequestException as e:
        raise Exception(f"Failed to fetch weather data: {str(e)}")
    except ValueError as e:
        raise Exception(f"Weather data error: {str(e)}")

@app.route('/weather')
@login_required
def weather():
    try:
        data = get_weather_data()
        weather_data = []
        
        for forecast in data['list']:
            dt = datetime.strptime(forecast['dt_txt'], '%Y-%m-%d %H:%M:%S')
            weather_data.append({
                'Date': dt.date().isoformat(),
                'Day': dt.strftime('%A'),
                'Condition': forecast['weather'][0]['main'],
                'Temperature': round(forecast['main']['temp'], 1),
                'Humidity': forecast['main']['humidity'],
                'Wind Speed': round(forecast['wind']['speed'], 1)
            })

        df = pd.DataFrame(weather_data)
        daily = df.groupby(['Date', 'Day']).agg({
            'Temperature': 'mean',
            'Humidity': 'mean',
            'Wind Speed': 'mean',
            'Condition': lambda x: x.mode()[0]
        }).reset_index()
        
        daily['Temperature'] = daily['Temperature'].round(1)
        daily['Humidity'] = daily['Humidity'].round(0)
        daily['Wind Speed'] = daily['Wind Speed'].round(1)

        # Save the weather data to a CSV file
        weather_csv = os.path.join(app.config['UPLOAD_FOLDER'], 'weather_forecast.csv')
        daily.to_csv(weather_csv, index=False)
        
        # Add the file to uploaded_files list
        uploaded_files.append({
            'name': 'weather_forecast.csv',
            'path': weather_csv,
            'uploaded_at': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            'user_id': current_user.id
        })

        return render_template('weather.html', 
                             weather_data=daily.to_html(classes='table table-bordered table-hover', index=False))
        
    except Exception as e:
        flash(f'Failed to fetch weather: {str(e)}', 'error')
        return render_template('weather.html', weather_data=None)

def generate_single_timetable(df, selected_subjects=None):
    # Track skipped labs and their intended subjects
    skipped_labs = []  # Format: {'day': day, 'subject': intended_subject}
    last_scheduled_subject = None
    
    # Filter subjects if specified
    if selected_subjects:
        available_subjects = [s for s in subjects if s != 'free' and s in selected_subjects]
        lab_subjects = [s for s in subjects if s not in no_lab_subjects and s in selected_subjects]
    else:
        available_subjects = [s for s in subjects if s != 'free']
        lab_subjects = [s for s in subjects if s not in no_lab_subjects]
    
    # Filter out Sunday
    df = df[df['Day'] != 'Sunday']
    
    # Create empty timetable
    timetable = pd.DataFrame(index=df['Day'].unique(), 
                           columns=['9:00-10:00', '10:00-11:00', '11:00-12:00', 
                                  '12:00-1:00', '1:00-2:00', '2:00-3:00', 
                                  '3:00-4:00', '4:00-5:00'])
    
    # Set lunch break for all days
    timetable['12:00-1:00'] = 'Lunch Break'
    
    # Prepare subjects and labs
    available_subjects = [s for s in subjects if s != 'free']
    lab_subjects = [s for s in subjects if s not in no_lab_subjects]
    random.shuffle(available_subjects)
    random.shuffle(lab_subjects)
    
    # Process each day
    for day in df['Day'].unique():
        day_data = df[df['Day'] == day].iloc[0]
        condition = day_data['Condition'].lower()
        
        # Skip labs on rainy or stormy days
        if 'rain' in condition or 'storm' in condition:
            # Select a lab subject that would have been scheduled
            intended_subject = None
            for sub in lab_subjects:
                if sub != last_scheduled_subject:
                    intended_subject = sub
                    break
            
            if not intended_subject:
                intended_subject = random.choice(lab_subjects)
            
            # Record the skipped lab
            skipped_labs.append({
                'day': day,
                'subject': intended_subject
            })
            
            # Schedule only regular subjects
            day_slots = [slot for slot in timetable.columns if slot != '12:00-1:00']
            subjects_for_day = available_subjects.copy()
            random.shuffle(subjects_for_day)
            
            for slot in day_slots:
                if subjects_for_day:
                    timetable.loc[day, slot] = subjects_for_day.pop(0)
                else:
                    subjects_for_day = available_subjects.copy()
                    random.shuffle(subjects_for_day)
                    timetable.loc[day, slot] = subjects_for_day.pop(0)
        else:
            # Determine how many labs to schedule (1 base + any make-up labs)
            labs_to_schedule = 1
            make_up_labs = []
            
            # Check if we have skipped labs to make up
            if skipped_labs:
                make_up_labs = [skipped_labs.pop(0) for _ in range(min(1, len(skipped_labs)))]
                labs_to_schedule += len(make_up_labs)
            
            # Schedule labs
            lab_slots = []
            lab_subjects_to_use = []
            
            # Get subjects for scheduled labs
            if make_up_labs:
                # Use the subjects from skipped labs first
                lab_subjects_to_use.extend([item['subject'] for item in make_up_labs])
            
            # Add additional subjects if needed (avoiding repeats)
            while len(lab_subjects_to_use) < labs_to_schedule:
                for sub in lab_subjects:
                    if (sub not in lab_subjects_to_use and 
                        sub != last_scheduled_subject and
                        (not lab_subjects_to_use or sub != lab_subjects_to_use[-1])):
                        lab_subjects_to_use.append(sub)
                        break
                else:
                    # If no unique subject found, just pick randomly
                    lab_subjects_to_use.append(random.choice(lab_subjects))
            
            # Schedule one 2-hour lab per day
            if lab_subjects_to_use:
                subject = lab_subjects_to_use[0]
                use_morning = random.choice([True, False])
                
                if use_morning:
                    # Morning lab (2-hour block)
                    lab_slots.append('9:00-11:00')
                    timetable.loc[day, '9:00-10:00'] = f"{subject} Lab"
                    timetable.loc[day, '10:00-11:00'] = f"{subject} Lab (cont.)"
                else:
                    # Afternoon lab (2-hour block)
                    lab_slots.append('1:00-3:00')
                    timetable.loc[day, '1:00-2:00'] = f"{subject} Lab"
                    timetable.loc[day, '2:00-3:00'] = f"{subject} Lab (cont.)"
                
                # Assign lab name
                lab = random.choice(labs)
                timetable.loc[day, lab_slots[-1].split('-')[0] + '-' + lab_slots[-1].split('-')[1]] = f"{subject} ({lab})"
                last_scheduled_subject = subject
            
            # Fill remaining slots with subjects
            remaining_slots = []
            for slot in timetable.columns:
                if slot not in ['12:00-1:00'] and not any(slot.startswith(l.split('-')[0]) for l in lab_slots):
                    remaining_slots.append(slot)
            
            subjects_for_day = available_subjects.copy()
            random.shuffle(subjects_for_day)
            
            for slot in remaining_slots:
                if subjects_for_day:
                    timetable.loc[day, slot] = subjects_for_day.pop(0)
                else:
                    subjects_for_day = available_subjects.copy()
                    random.shuffle(subjects_for_day)
                    timetable.loc[day, slot] = subjects_for_day.pop(0)
    
    return timetable

@app.route('/generate_timetable/<filename>', methods=['GET', 'POST'])
@login_required
def generate_timetable(filename):
    try:
        # Check if the file exists
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        
        # Get selected subjects from form
        selected_subjects = request.form.getlist('subjects') if request.method == 'POST' else None
        if not os.path.exists(filepath):
            error_msg = f'File not found: {filename}'
            app.logger.error(error_msg)
            if request.method == 'POST':
                flash(error_msg, 'error')
                return redirect(url_for('upload'))
            return error_msg, 404

        # Read and validate the CSV file
        try:
            df = pd.read_csv(filepath)
            df.columns = df.columns.str.strip()
            
            # Validate required columns
            required_cols = {'Date', 'Day', 'Condition', 'Temperature', 'Humidity', 'Wind Speed'}
            if not required_cols.issubset(df.columns):
                missing = required_cols - set(df.columns)
                error_msg = f"Missing columns in CSV: {', '.join(missing)}"
                app.logger.error(error_msg)
                if request.method == 'POST':
                    flash(error_msg, 'error')
                    return redirect(url_for('upload'))
                return error_msg, 400
        except Exception as e:
            error_msg = f'Error reading CSV file: {str(e)}'
            app.logger.error(error_msg)
            if request.method == 'POST':
                flash(error_msg, 'error')
                return redirect(url_for('upload'))
            return error_msg, 400

        # Check if we have subjects and labs configured
        if not subjects or not labs:
            flash('Please configure subjects and labs first!', 'error')
            return redirect(url_for('configure_subjects'))
        
        # Create downloads directory if it doesn't exist
        download_dir = os.path.join(os.path.dirname(__file__), app.config['DOWNLOAD_FOLDER'])
        os.makedirs(download_dir, exist_ok=True)
        
        # Generate timetables
        zip_file = f'timetables_{filename.split(".")[0]}.zip'
        zip_path = os.path.join(download_dir, zip_file)
        
        # Remove existing zip file if it exists
        if os.path.exists(zip_path):
            try:
                os.remove(zip_path)
                time.sleep(1)  # Give the system time to release the file
            except Exception as e:
                flash(f'Error removing existing zip file: {str(e)}', 'error')
                return redirect(url_for('upload'))
        
        # Create a temporary directory for PDFs
        temp_dir = os.path.join(app.config['DOWNLOAD_FOLDER'], 'temp_pdfs')
        os.makedirs(temp_dir, exist_ok=True)
        
        try:
            pdf_files = []
            for i in range(1, 7):
                try:
                    # Generate timetable with optional subject filter
                    timetable = generate_single_timetable(df, selected_subjects)
                    
                    # Create PDF
                    pdf_file = f'timetable_v{i}.pdf'
                    pdf_path = os.path.join(temp_dir, pdf_file)
                    create_pdf_timetable(timetable, pdf_path)
                    pdf_files.append(pdf_path)
                except Exception as e:
                    flash(f'Error generating timetable version {i}: {str(e)}', 'error')
                    # Clean up any created PDFs
                    for pdf in pdf_files:
                        try:
                            os.remove(pdf)
                        except:
                            pass
                    return redirect(url_for('upload'))

            # Create zip file with all PDFs
            with zipfile.ZipFile(zip_path, 'w') as zipf:
                for pdf_path in pdf_files:
                    if os.path.exists(pdf_path):
                        zipf.write(pdf_path, os.path.basename(pdf_path))
                        try:
                            os.remove(pdf_path)  # Clean up individual PDFs
                        except:
                            pass

            # Clean up temp directory
            try:
                os.rmdir(temp_dir)
            except:
                pass

        except Exception as e:
            flash(f'Error creating zip file: {str(e)}', 'error')
            # Clean up any remaining files
            if os.path.exists(zip_path):
                try:
                    os.remove(zip_path)
                except:
                    pass
            return redirect(url_for('upload'))

        # Check if zip file was created successfully
        if not os.path.exists(zip_path):
            flash('Failed to create timetable files', 'error')
            return redirect(url_for('upload'))

        # Record the download in database
        with get_db_connection() as conn:
            c = conn.cursor()
            c.execute("""
                INSERT INTO downloads (user_id, filename, filepath, downloaded_at)
                VALUES (?, ?, ?, ?)
            """, (current_user.id, zip_file, zip_path, datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
            conn.commit()
        
        # Send the file
        try:
            response = send_file(
                zip_path,
                as_attachment=True,
                download_name=zip_file,
                mimetype='application/zip'
            )
            response.headers['X-Accel-Buffering'] = 'no'
            response.headers['Cache-Control'] = 'no-cache'
            response.headers['Connection'] = 'close'
            return response
        except Exception as e:
            flash(f'Error sending file: {str(e)}', 'error')
            return redirect(url_for('upload'))
            
    except Exception as e:
        flash(f'Failed to generate timetable: {str(e)}', 'error')
        return redirect(url_for('upload'))

@app.route('/download/<filename>')
@login_required
def download(filename):
    try:
        response = send_from_directory(
            app.config['DOWNLOAD_FOLDER'],
            filename,
            as_attachment=True
        )
        
        # Ensure the response is fully processed before returning
        response.call_on_close(lambda: print("Download completed"))
        return response
    except Exception as e:
        flash(f'Download failed: {str(e)}', 'error')
        return redirect(url_for('downloads'))

@app.route('/view')
@login_required
def view():
    return render_template('view.html', uploaded_files=uploaded_files)

@app.route('/sample.csv')
def sample_csv():
    """Generate and serve a sample CSV file"""
    sample_data = """Date,Day,Condition,Temperature,Humidity,Wind Speed
2023-06-01,Monday,Sunny,32.5,45,12.3
2023-06-02,Tuesday,Cloudy,28.7,60,8.5
2023-06-03,Wednesday,Rain,25.1,85,15.2
2023-06-04,Thursday,Sunny,30.2,50,10.1
2023-06-05,Friday,Cloudy,27.8,65,9.7
2023-06-06,Saturday,Storm,23.4,90,25.0
2023-06-07,Sunday,Sunny,31.0,48,11.5"""
    
    # Create in-memory file
    mem_file = StringIO()
    mem_file.write(sample_data)
    mem_file.seek(0)
    
    return send_file(
        mem_file,
        mimetype='text/csv',
        as_attachment=True,
        download_name='sample_weather_data.csv'
    )

@app.route('/downloads')
@login_required
def downloads():
    try:
        print(f"Fetching downloads for user {current_user.id}")  # Debug log
        
        with get_db_connection() as conn:
            c = conn.cursor()
            c.execute("""
                SELECT filename, downloaded_at 
                FROM downloads 
                WHERE user_id = ?
                ORDER BY downloaded_at DESC
            """, (current_user.id,))
            
            files = []
            for row in c.fetchall():
                filepath = os.path.join(app.config['DOWNLOAD_FOLDER'], row[0])
                if os.path.exists(filepath):
                    files.append({
                        'name': row[0],
                        'downloaded_at': row[1],
                        'exists': True
                    })
                else:
                    print(f"File not found: {filepath}")  # Debug log
                    # Optionally clean up missing file records
                    c.execute("DELETE FROM downloads WHERE filename = ? AND user_id = ?", 
                             (row[0], current_user.id))
                    conn.commit()
        
        return render_template('downloads.html', downloaded_files=files)
        
    except Exception as e:
        print(f"Error in downloads route: {str(e)}")  # Debug log
        flash('Error loading downloads. Please try again.', 'error')
        return render_template('downloads.html', downloaded_files=[])

@app.cli.command('generate_timetable')
@click.argument('filename')
def cli_generate_timetable(filename):
    """Generate timetable from command line"""
    with app.app_context():
        try:
            result = generate_timetable(filename)
            if isinstance(result, str) and result.startswith('Error'):
                click.echo(result)
                return 1
            click.echo(f"Successfully generated timetable from {filename}")
            return 0
        except Exception as e:
            click.echo(f"Error: {str(e)}")
            return 1

if __name__ == '__main__':
    init_db()
    app.run(debug=True)